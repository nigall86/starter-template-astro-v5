---
// libraries
import { Icon } from 'astro-icon/components';

// styles
import '../../../styles/components/link.css';

// types
import { type HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'button'> {
  btnId?: string;
  text?: string;
  srText?: string;
  dataType?: 'accent' | 'primary' | 'outline' | 'inactive' | 'invisible' | 'btn-icon';
  iconName?: string;
  iconSide?: 'left' | 'right';
  iconSize?: '24' | '32' | '48' | '64';
  iconColor?: string;
  classes?: string;
}

const { btnId, text, srText, dataType, iconName = '', iconSide, iconSize = '24', iconColor, onClick, classes, ...rest } = Astro.props as Props;
---
{ dataType && dataType !== 'btn-icon' && (
  <button id={btnId} data-type={dataType}  class:list={['btn', classes]} {...rest}>
    { iconName !== '' && iconSide === 'left' && (<Icon name={iconName} size={iconSize} />)}
      {text}
    <slot />
    { iconName !== '' && iconSide === 'right' && (<Icon name={iconName} size={iconSize} />)}
  </button>
)}

{ dataType && dataType === 'btn-icon' && (
  <button id={btnId} data-type={dataType} class:list={['btn', classes]} {...rest}>
    { iconName !== '' && (<Icon name={iconName} size={iconSize} />)}
    <span class='sr-only'>{srText}</span>
  </button>
)}

<style define:vars={{ iconSize, iconColor }}>
  [data-icon] {
    width: var(--iconSize);
    height: var(--iconSize);
    color: var(--iconColor);
  }
</style>

